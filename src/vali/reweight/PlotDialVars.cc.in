#include <sstream>
#include <string>

#include "TTree.h"
#include "TFile.h"
#include "TH1D.h"
#include "TH2D.h"
#include "TCanvas.h"
#include "TLegend.h"
#include "TStyle.h"
#include "TColor.h"

TStyle* MakeStyle(){
  TStyle *Style = new TStyle("st","st");

  Style->SetHatchesLineWidth(Style->GetHatchesLineWidth()*3);

  // use plain black on white colors
  Style->SetFrameBorderMode(0);
  Style->SetCanvasBorderMode(0);
  Style->SetPadBorderMode(0);
  Style->SetPadColor(0);
  Style->SetCanvasColor(0);
  Style->SetStatColor(0);
  Style->SetFillColor(0);
  Style->SetLegendBorderSize(1);

  // set the paper & margin sizes
  Style->SetPaperSize(20,26);

  // use large Times-Roman fonts
  Style->SetTextFont(132);
  Style->SetTextSize(0.15);
  Style->SetLabelFont(132,"x");
  Style->SetLabelFont(132,"y");
  Style->SetLabelFont(132,"z");
  Style->SetLabelFont(132,"t");
  Style->SetTitleFont(132,"x");
  Style->SetTitleFont(132,"y");
  Style->SetTitleFont(132,"z");
  Style->SetTitleFont(132,"t");
  Style->SetTitleFillColor(0);
  Style->SetTitleX(0.25);
  Style->SetTitleFontSize(0.1);
  Style->SetTitleFont(132,"pad");

  // use bold lines and markers
  Style->SetMarkerStyle(20);
  Style->SetHistLineWidth(1.85);
  Style->SetLineStyleString(2,"[12 12]"); // postscript dashes

  // get rid of X error bars and y error bar caps
  Style->SetErrorX(0.001);

  // do not display any of the standard histogram decorations
  Style->SetOptTitle(0);
  Style->SetOptStat(0);
  Style->SetOptFit(0);

  // put tick marks on top and RHS of plots
  Style->SetPadTickX(1);
  Style->SetPadTickY(1);

  Style->SetPalette(1,0);  // use the nice red->blue palette
  const Int_t NRGBs = 5;
  const Int_t NCont = 255;

  Double_t stops[NRGBs] = { 0.00, 0.34, 0.61, 0.84, 1.00 };
  Double_t red[NRGBs]   = { 0.00, 0.00, 0.87, 1.00, 0.51 };
  Double_t green[NRGBs] = { 0.00, 0.81, 1.00, 0.20, 0.00 };
  Double_t blue[NRGBs]  = { 0.51, 1.00, 0.12, 0.00, 0.00 };
  TColor::CreateGradientColorTable(NRGBs, stops, red, green, blue, NCont);
  Style->SetNumberContours(NCont);

  return Style;
}
//
void DoPlotting();

struct VarToPlot {
  std::string XAxisTitle;
  std::string XVariableName;
  std::string XVariablePrettyName;
  std::string DialName;
  std::string DialPrettyName;
  std::string DialUnits;
  std::string PlotString;
  std::string SelectionString;
  std::string DialValm2;
  std::string DialVal0;
  std::string DialVal2;
  int NXBins;
  double XBinMin;
  double XBinMax;
  bool LogHist;
};

struct VarToPlot1D : VarToPlot  {
  std::string LegendTitle;
  double LegX1;
  double LegY1;
  double LegX2;
  double LegY2;
};

struct VarToPlot2D : VarToPlot {
  int NYBins;
  double YBinMin;
  double YBinMax;
  std::string YAxisTitle;
  std::string YVariableName;
  std::string YVariablePrettyName;
};

TFile* _file0 = 0;
TFile* _file1 = 0;
TFile* _file2 = 0;
TFile* _file3 = 0;
std::string PDFOutName = "";
std::string nent_dialm2 = "0";
std::string nent_dial0 = "0";
std::string nent_dial2 = "0";

TTree * tree_dialm2 = 0;
TTree * tree_dial0 = 0;
TTree * tree_dial2 = 0;

template<typename X>
X * strTH(std::string n, std::string t, int nb, double l, double h){
  return new X(n.c_str(),t.c_str(),nb,l,h);
}

template<typename X>
void Draw(X* rt, std::string p, std::string s, std::string o){
  rt->Draw(p.c_str(),s.c_str(),o.c_str());
}

template<typename X>
void SetTitle(X* ax, std::string s){
  ax->SetTitle(s.c_str());
}
template<typename X>
void EnlargeAx(X* ax, Float_t tfact=1.2, Float_t ofact=0xDEADB33F, Float_t lfact=0xDEADB33F){
  ofact = (ofact == 0xDEADB33F)?tfact:ofact;
  lfact = (lfact == 0xDEADB33F)?tfact:lfact;
  ax->SetTitleSize(tfact*ax->GetTitleSize());
  ax->SetTitleOffset(ofact*ax->GetTitleOffset());
  ax->SetLabelSize(lfact*ax->GetLabelSize());
}

void PlotVar1D(VarToPlot1D &v){

  std::string h_m2_name = v.XVariableName+"_dialm2";
  std::string h_0_name = v.XVariableName+"_dial0";
  std::string h_2_name = v.XVariableName+"_dial2";
  TH1D* h_dialm2 = strTH<TH1D>(h_m2_name, v.DialPrettyName + " = " + v.DialValm2 + " " + v.DialUnits, v.NXBins, v.XBinMin, v.XBinMax);
  TH1D* h_dial0 = strTH<TH1D>(h_0_name, v.DialPrettyName + " = " + v.DialVal0 + " " + v.DialUnits, v.NXBins, v.XBinMin, v.XBinMax);
  TH1D* h_dial2 = strTH<TH1D>(h_2_name, v.DialPrettyName +" = " + v.DialVal2 + " " + v.DialUnits, v.NXBins, v.XBinMin, v.XBinMax);

  std::string h_0_wm2_name = v.XVariableName+"_dial0_weightm2";
  std::string h_0_w2_name = v.XVariableName+"_dial0_weight2";
  TH1D* h_dial0_weight_m2 = strTH<TH1D>(h_0_wm2_name, v.DialPrettyName + " = " + v.DialVal0 + " " + v.DialUnits + ", Reweighted to " + v.DialValm2 + " " + v.DialUnits, v.NXBins, v.XBinMin, v.XBinMax);
  TH1D* h_dial0_weight_2 = strTH<TH1D>(h_0_w2_name, v.DialPrettyName + " = " + v.DialVal0 + " " + v.DialUnits + ", Reweighted to " + v.DialVal2 + " " + v.DialUnits, v.NXBins, v.XBinMin, v.XBinMax);


  Draw(tree_dialm2, v.PlotString + " >> " + h_m2_name,
    std::string("(EvtWght*1E-38*(" + v.SelectionString + "))/")+nent_dialm2+".0","GOFF");

  Draw(tree_dial0, v.PlotString + " >> " + h_0_name,
    std::string("(EvtWght*1E-38*(" + v.SelectionString + "))/")+nent_dial0+".0","GOFF");

  Draw(tree_dial2, v.PlotString + " >> " + h_2_name,
    std::string("(EvtWght*1E-38*(" + v.SelectionString + "))/")+nent_dial2+".0","GOFF");

  Draw(tree_dial0, v.PlotString + " >> " + h_0_wm2_name,
    std::string("weight_") + v.DialName + "_0_to_minus2*(EvtWght*1E-38*(" + v.SelectionString + "))/"+nent_dial0+".0","GOFF");

  Draw(tree_dial0, v.PlotString + " >> " + h_0_w2_name,
    std::string("weight_") + v.DialName + "_0_to_2*(EvtWght*1E-38*(" + v.SelectionString + "))/"+nent_dial0+".0","GOFF");

  h_dialm2->Scale(1.0,"width");
  h_dial0->Scale(1.0,"width");
  h_dial2->Scale(1.0,"width");
  h_dial0_weight_m2->Scale(1.0,"width");
  h_dial0_weight_2->Scale(1.0,"width");

  h_dialm2->SetMarkerStyle(0);
  h_dial0->SetMarkerStyle(0);
  h_dial2->SetMarkerStyle(0);
  h_dial0_weight_m2->SetMarkerStyle(0);
  h_dial0_weight_2->SetMarkerStyle(0);

  h_dialm2->SetLineWidth(2);
  h_dialm2->SetLineStyle(1);
  h_dialm2->SetLineColor(kBlack);

  h_dial0->SetLineWidth(2);
  h_dial0->SetLineStyle(1);
  h_dial0->SetLineColor(kBlue);

  h_dial2->SetLineWidth(2);
  h_dial2->SetLineStyle(1);
  h_dial2->SetLineColor(kRed);

  h_dial0_weight_m2->SetLineWidth(3);
  h_dial0_weight_m2->SetLineStyle(2);
  h_dial0_weight_m2->SetLineColor(kGreen-2);

  h_dial0_weight_2->SetLineWidth(3);
  h_dial0_weight_2->SetLineStyle(2);
  h_dial0_weight_2->SetLineColor(kBlack);

  TCanvas * c1 = new TCanvas(v.XVariableName.c_str(),"");
  c1->SetLogy(v.LogHist);
  c1->SetMargin(0.15,0.03,0.13,0.06);

  TLegend * leg = new TLegend(v.LegX1,v.LegY1,v.LegX2,v.LegY2);
  leg->SetHeader(v.LegendTitle.c_str());
  leg->SetFillColor(kWhite);
  leg->SetFillStyle(-1);
  leg->SetBorderSize(-1);

  SetTitle(h_dial2->GetXaxis(),v.XAxisTitle);
  SetTitle(h_dial2->GetYaxis(),"#frac{d#sigma}{d" + v.XVariablePrettyName + "} (cm^{2} nucleon^{-1} GeV^{-1})");
  EnlargeAx(h_dial2->GetXaxis(),1.25,1.25,1.5);
  EnlargeAx(h_dial2->GetYaxis(),1.25,1.25,1.5);

  h_dial2->Draw("EHIST");
  h_dialm2->Draw("EHIST SAME");
  h_dial0->Draw("EHIST SAME");
  h_dial0_weight_m2->Draw("EHIST SAME");
  h_dial0_weight_2->Draw("EHIST SAME");

  leg->AddEntry(h_dial2, h_dial2->GetTitle(), "l");
  leg->AddEntry(h_dialm2, h_dialm2->GetTitle(), "l");
  leg->AddEntry(h_dial0, h_dial0->GetTitle(), "l");
  leg->AddEntry(h_dial0_weight_m2, h_dial0_weight_m2->GetTitle(), "l");
  leg->AddEntry(h_dial0_weight_2, h_dial0_weight_2->GetTitle(), "l");

  leg->Draw();

  c1->SaveAs(PDFOutName.c_str());

}

template<typename X>
X * strTH(std::string n, std::string t, int nbx, double lx, double hx, int nby, double ly, double hy){
  return new X(n.c_str(),t.c_str(),nbx,lx,hx,nby,ly,hy);
}

void PlotVar2D(VarToPlot2D &v){

  std::string h_m2_name = v.XVariableName+v.YVariableName+"_dialm2";
  std::string h_2_name = v.XVariableName+v.YVariableName+"_dial2";
  TH2D* h_dialm2 = strTH<TH2D>(h_m2_name, v.DialPrettyName + " = " + v.DialValm2 + " " + v.DialUnits, v.NXBins, v.XBinMin, v.XBinMax, v.NYBins, v.YBinMin, v.YBinMax);
  TH2D* h_dial2 = strTH<TH2D>(h_2_name, v.DialPrettyName +" = " + v.DialVal2 + " " + v.DialUnits, v.NXBins, v.XBinMin, v.XBinMax, v.NYBins, v.YBinMin, v.YBinMax);

  std::string h_0_wm2_name = v.XVariableName+v.YVariableName+"_dial0_weightm2";
  std::string h_0_w2_name = v.XVariableName+v.YVariableName+"_dial0_weight2";
  TH2D* h_dial0_weight_m2 = strTH<TH2D>(h_0_wm2_name, v.DialPrettyName + " = " + v.DialVal0 + " " + v.DialUnits + ", Reweighted to " + v.DialValm2 + " " + v.DialUnits, v.NXBins, v.XBinMin, v.XBinMax, v.NYBins, v.YBinMin, v.YBinMax);
  TH2D* h_dial0_weight_2 = strTH<TH2D>(h_0_w2_name, v.DialPrettyName + " = " + v.DialVal0 + " " + v.DialUnits + ", Reweighted to " + v.DialVal2 + " " + v.DialUnits, v.NXBins, v.XBinMin, v.XBinMax, v.NYBins, v.YBinMin, v.YBinMax);


  Draw(tree_dialm2, v.PlotString + " >> " + h_m2_name,
    std::string("(EvtWght*1E-38*(" + v.SelectionString + "))/")+nent_dialm2+".0","GOFF");

  Draw(tree_dial2, v.PlotString + " >> " + h_2_name,
    std::string("(EvtWght*1E-38*(" + v.SelectionString + "))/")+nent_dial2+".0","GOFF");

  Draw(tree_dial0, v.PlotString + " >> " + h_0_wm2_name,
    std::string("weight_") + v.DialName + "_0_to_minus2*(EvtWght*1E-38*(" + v.SelectionString + "))/"+nent_dial0+".0","GOFF");

  Draw(tree_dial0, v.PlotString + " >> " + h_0_w2_name,
    std::string("weight_") + v.DialName + "_0_to_2*(EvtWght*1E-38*(" + v.SelectionString + "))/"+nent_dial0+".0","GOFF");

  h_dialm2->Scale(1.0,"width");
  h_dial2->Scale(1.0,"width");
  h_dial0_weight_m2->Scale(1.0,"width");
  h_dial0_weight_2->Scale(1.0,"width");

  TCanvas * c1 = new TCanvas((v.XVariableName+v.YVariableName).c_str(),"");
  c1->SetLogz(v.LogHist);

  TH2D* h_dialm2_over_dial0_wm2 = strTH<TH2D>(h_m2_name+"__"+h_0_wm2_name, v.DialPrettyName + " = " + v.DialValm2 + " " + v.DialUnits, v.NXBins, v.XBinMin, v.XBinMax, v.NYBins, v.YBinMin, v.YBinMax);
  TH2D* h_dial2_over_dial0_w2 = strTH<TH2D>(h_2_name+"__"+h_0_w2_name, v.DialPrettyName + " = " + v.DialValm2 + " " + v.DialUnits, v.NXBins, v.XBinMin, v.XBinMax, v.NYBins, v.YBinMin, v.YBinMax);

  h_dialm2_over_dial0_wm2->Divide(h_dialm2,h_dial0_weight_m2);
  h_dial2_over_dial0_w2->Divide(h_dial2,h_dial0_weight_2);

  c1->SetMargin(0,0,0,0);
  c1->Divide(3,2,0,0);
  c1->GetPad(1)->SetMargin(0.15,0.2,0.12,0.06);
  c1->GetPad(2)->SetMargin(0.15,0.2,0.12,0.06);
  c1->GetPad(3)->SetMargin(0.15,0.225,0.12,0.06);
  c1->GetPad(4)->SetMargin(0.15,0.2,0.12,0.06);
  c1->GetPad(5)->SetMargin(0.15,0.2,0.12,0.06);
  c1->GetPad(6)->SetMargin(0.15,0.225,0.12,0.06);

  c1->GetPad(1)->cd();
  SetTitle(h_dialm2->GetXaxis(),v.XAxisTitle);
  SetTitle(h_dialm2->GetYaxis(),v.YAxisTitle);
  SetTitle(h_dialm2->GetZaxis(),"#frac{d^{2}#sigma}{d" + v.XVariablePrettyName + v.YVariablePrettyName + "} (cm^{2} nucleon^{-1} GeV^{-1})");
  EnlargeAx(h_dialm2->GetXaxis(),1.25,1.2,1.0);
  EnlargeAx(h_dialm2->GetYaxis(),1.25,1.2,1.0);
  EnlargeAx(h_dialm2->GetZaxis(),1.0,1.2,1.0);
  h_dialm2->Draw("COLZ");
  c1->GetPad(2)->cd();
  SetTitle(h_dial0_weight_m2->GetXaxis(),v.XAxisTitle);
  SetTitle(h_dial0_weight_m2->GetYaxis(),v.YAxisTitle);
  SetTitle(h_dial0_weight_m2->GetZaxis(),"#frac{d^{2}#sigma}{d" + v.XVariablePrettyName + v.YVariablePrettyName + "} (cm^{2} nucleon^{-1} GeV^{-1})");
  EnlargeAx(h_dial0_weight_m2->GetXaxis(),1.25,1.2,1.0);
  EnlargeAx(h_dial0_weight_m2->GetYaxis(),1.25,1.2,1.0);
  EnlargeAx(h_dial0_weight_m2->GetZaxis(),1.0,1.2,1.0);
  h_dial0_weight_m2->Draw("COLZ");
  c1->GetPad(3)->cd();
  SetTitle(h_dialm2_over_dial0_wm2->GetXaxis(),v.XAxisTitle);
  SetTitle(h_dialm2_over_dial0_wm2->GetYaxis(),v.YAxisTitle);
  SetTitle(h_dialm2_over_dial0_wm2->GetZaxis(),"#frac{"+v.DialPrettyName + " = " + v.DialVal2+"}{"+v.DialPrettyName + " = " + v.DialVal0 + " " + v.DialUnits + ", Reweighted to " + v.DialValm2 + " " + v.DialUnits+"}");
  EnlargeAx(h_dialm2_over_dial0_wm2->GetXaxis(),1.25,1.2,1.0);
  EnlargeAx(h_dialm2_over_dial0_wm2->GetYaxis(),1.25,1.2,1.0);
  EnlargeAx(h_dialm2_over_dial0_wm2->GetZaxis(),1.0,1.35,1.0);
  h_dialm2_over_dial0_wm2->Draw("COLZ");
  c1->GetPad(4)->cd();
  SetTitle(h_dial2->GetXaxis(),v.XAxisTitle);
  SetTitle(h_dial2->GetYaxis(),v.YAxisTitle);
  SetTitle(h_dial2->GetZaxis(),"#frac{d^{2}#sigma}{d" + v.XVariablePrettyName + v.YVariablePrettyName + "} (cm^{2} nucleon^{-1} GeV^{-1})");
  EnlargeAx(h_dial2->GetXaxis(),1.25,1.2,1.0);
  EnlargeAx(h_dial2->GetYaxis(),1.25,1.2,1.0);
  EnlargeAx(h_dial2->GetZaxis(),1.0,1.2,1.0);
  h_dial2->Draw("COLZ");
  c1->GetPad(5)->cd();
  SetTitle(h_dial0_weight_2->GetXaxis(),v.XAxisTitle);
  SetTitle(h_dial0_weight_2->GetYaxis(),v.YAxisTitle);
  SetTitle(h_dial0_weight_2->GetZaxis(),"#frac{d^{2}#sigma}{d" + v.XVariablePrettyName + v.YVariablePrettyName + "} (cm^{2} nucleon^{-1} GeV^{-1})");
  EnlargeAx(h_dial0_weight_2->GetXaxis(),1.25,1.2,1.0);
  EnlargeAx(h_dial0_weight_2->GetYaxis(),1.25,1.2,1.0);
  EnlargeAx(h_dial0_weight_2->GetZaxis(),1.0,1.2,1.0);
  h_dial0_weight_2->Draw("COLZ");
  c1->GetPad(6)->cd();
  SetTitle(h_dial2_over_dial0_w2->GetXaxis(),v.XAxisTitle);
  SetTitle(h_dial2_over_dial0_w2->GetYaxis(),v.YAxisTitle);
  SetTitle(h_dial2_over_dial0_w2->GetZaxis(),"#frac{"+v.DialPrettyName + " = " + v.DialVal2+"}{"+v.DialPrettyName + " = " + v.DialVal0 + " " + v.DialUnits + ", Reweighted to " + v.DialVal2 + " " + v.DialUnits+"}");
  EnlargeAx(h_dial2_over_dial0_w2->GetXaxis(),1.25,1.2,1.0);
  EnlargeAx(h_dial2_over_dial0_w2->GetYaxis(),1.25,1.2,1.0);
  EnlargeAx(h_dial2_over_dial0_w2->GetZaxis(),1.0,1.35,1.0);
  h_dial2_over_dial0_w2->Draw("COLZ");

  c1->SaveAs(PDFOutName.c_str());

}

//Can be run from CINT
#ifdef __CINT__
PlotDialVars(char const *f1,
  char const *f2, char const *f3, char const *f4, char const *f5){
char const* argv[6];
argv[1] = f1;
argv[2] = f2;
argv[3] = f3;
argv[4] = f4;
argv[5] = f5
//Or compiled
#else
int main(int argc, char const * argv[]){
#endif

  MakeStyle()->cd();

  _file0 = TFile::Open(argv[1],"OPEN");
  _file1 = TFile::Open(argv[2],"OPEN");
  _file2 = TFile::Open(argv[3],"OPEN");
  _file3 = TFile::Open(argv[4],"OPEN");
  PDFOutName = argv[5];

  tree_dialm2 = static_cast<TTree*>(_file0->Get("nwSAF"));
  std::stringstream ss;
  ss << tree_dialm2->GetEntries();
  nent_dialm2 = ss.str(); ss.str("");
  tree_dial0 = static_cast<TTree*>(_file1->Get("nwSAF"));
  ss << tree_dial0->GetEntries();
  nent_dial0 = ss.str(); ss.str("");
  tree_dial2 = static_cast<TTree*>(_file2->Get("nwSAF"));
  ss << tree_dial2->GetEntries();
  nent_dial2 = ss.str(); ss.str("");

  tree_dial0->AddFriend("weights", _file3->GetName());

  TFile* HistoFile = TFile::Open("HistoCache.root","RECREATE");
  TH1::SetDefaultSumw2();

  TCanvas *c1 = new TCanvas("pdfdoc_dummy","");
  c1->SaveAs((PDFOutName+"[").c_str());

  //This gets specialized
  DoPlotting();

  c1->SaveAs((PDFOutName+"]").c_str());

  _file0->Close();
  _file1->Close();
  _file2->Close();
  _file3->Close();
  HistoFile->Write();
  HistoFile->Close();
}

void DoPlotting(){
